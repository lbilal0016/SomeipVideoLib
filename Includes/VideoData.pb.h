// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VideoData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_VideoData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_VideoData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_VideoData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_VideoData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_VideoData_2eproto;
class Frame;
class FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class VideoDataProto;
class VideoDataProtoDefaultTypeInternal;
extern VideoDataProtoDefaultTypeInternal _VideoDataProto_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Frame* Arena::CreateMaybeMessage<::Frame>(Arena*);
template<> ::VideoDataProto* Arena::CreateMaybeMessage<::VideoDataProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Frame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Frame) */ {
 public:
  inline Frame() : Frame(nullptr) {};
  virtual ~Frame();

  Frame(const Frame& from);
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame& operator=(Frame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Frame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(Frame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Frame* New() const final {
    return CreateMaybeMessage<Frame>(nullptr);
  }

  Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Frame";
  }
  protected:
  explicit Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_VideoData_2eproto);
    return ::descriptor_table_VideoData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Frame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_VideoData_2eproto;
};
// -------------------------------------------------------------------

class VideoDataProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VideoDataProto) */ {
 public:
  inline VideoDataProto() : VideoDataProto(nullptr) {};
  virtual ~VideoDataProto();

  VideoDataProto(const VideoDataProto& from);
  VideoDataProto(VideoDataProto&& from) noexcept
    : VideoDataProto() {
    *this = ::std::move(from);
  }

  inline VideoDataProto& operator=(const VideoDataProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoDataProto& operator=(VideoDataProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VideoDataProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoDataProto* internal_default_instance() {
    return reinterpret_cast<const VideoDataProto*>(
               &_VideoDataProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VideoDataProto& a, VideoDataProto& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoDataProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoDataProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VideoDataProto* New() const final {
    return CreateMaybeMessage<VideoDataProto>(nullptr);
  }

  VideoDataProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VideoDataProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VideoDataProto& from);
  void MergeFrom(const VideoDataProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoDataProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VideoDataProto";
  }
  protected:
  explicit VideoDataProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_VideoData_2eproto);
    return ::descriptor_table_VideoData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVideoFramesFieldNumber = 1,
    kSingleFrameFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
    kFpsRateFieldNumber = 5,
    kFrameSizeCapturedFieldNumber = 6,
  };
  // repeated bytes video_frames = 1;
  int video_frames_size() const;
  private:
  int _internal_video_frames_size() const;
  public:
  void clear_video_frames();
  const std::string& video_frames(int index) const;
  std::string* mutable_video_frames(int index);
  void set_video_frames(int index, const std::string& value);
  void set_video_frames(int index, std::string&& value);
  void set_video_frames(int index, const char* value);
  void set_video_frames(int index, const void* value, size_t size);
  std::string* add_video_frames();
  void add_video_frames(const std::string& value);
  void add_video_frames(std::string&& value);
  void add_video_frames(const char* value);
  void add_video_frames(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& video_frames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_video_frames();
  private:
  const std::string& _internal_video_frames(int index) const;
  std::string* _internal_add_video_frames();
  public:

  // bytes single_frame = 2;
  void clear_single_frame();
  const std::string& single_frame() const;
  void set_single_frame(const std::string& value);
  void set_single_frame(std::string&& value);
  void set_single_frame(const char* value);
  void set_single_frame(const void* value, size_t size);
  std::string* mutable_single_frame();
  std::string* release_single_frame();
  void set_allocated_single_frame(std::string* single_frame);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_single_frame();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_single_frame(
      std::string* single_frame);
  private:
  const std::string& _internal_single_frame() const;
  void _internal_set_single_frame(const std::string& value);
  std::string* _internal_mutable_single_frame();
  public:

  // int32 width = 3;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 4;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double fps_rate = 5;
  void clear_fps_rate();
  double fps_rate() const;
  void set_fps_rate(double value);
  private:
  double _internal_fps_rate() const;
  void _internal_set_fps_rate(double value);
  public:

  // bool frame_size_captured = 6;
  void clear_frame_size_captured();
  bool frame_size_captured() const;
  void set_frame_size_captured(bool value);
  private:
  bool _internal_frame_size_captured() const;
  void _internal_set_frame_size_captured(bool value);
  public:

  // @@protoc_insertion_point(class_scope:VideoDataProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> video_frames_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr single_frame_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  double fps_rate_;
  bool frame_size_captured_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_VideoData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Frame

// -------------------------------------------------------------------

// VideoDataProto

// repeated bytes video_frames = 1;
inline int VideoDataProto::_internal_video_frames_size() const {
  return video_frames_.size();
}
inline int VideoDataProto::video_frames_size() const {
  return _internal_video_frames_size();
}
inline void VideoDataProto::clear_video_frames() {
  video_frames_.Clear();
}
inline std::string* VideoDataProto::add_video_frames() {
  // @@protoc_insertion_point(field_add_mutable:VideoDataProto.video_frames)
  return _internal_add_video_frames();
}
inline const std::string& VideoDataProto::_internal_video_frames(int index) const {
  return video_frames_.Get(index);
}
inline const std::string& VideoDataProto::video_frames(int index) const {
  // @@protoc_insertion_point(field_get:VideoDataProto.video_frames)
  return _internal_video_frames(index);
}
inline std::string* VideoDataProto::mutable_video_frames(int index) {
  // @@protoc_insertion_point(field_mutable:VideoDataProto.video_frames)
  return video_frames_.Mutable(index);
}
inline void VideoDataProto::set_video_frames(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:VideoDataProto.video_frames)
  video_frames_.Mutable(index)->assign(value);
}
inline void VideoDataProto::set_video_frames(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:VideoDataProto.video_frames)
  video_frames_.Mutable(index)->assign(std::move(value));
}
inline void VideoDataProto::set_video_frames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  video_frames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:VideoDataProto.video_frames)
}
inline void VideoDataProto::set_video_frames(int index, const void* value, size_t size) {
  video_frames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VideoDataProto.video_frames)
}
inline std::string* VideoDataProto::_internal_add_video_frames() {
  return video_frames_.Add();
}
inline void VideoDataProto::add_video_frames(const std::string& value) {
  video_frames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:VideoDataProto.video_frames)
}
inline void VideoDataProto::add_video_frames(std::string&& value) {
  video_frames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:VideoDataProto.video_frames)
}
inline void VideoDataProto::add_video_frames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  video_frames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:VideoDataProto.video_frames)
}
inline void VideoDataProto::add_video_frames(const void* value, size_t size) {
  video_frames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:VideoDataProto.video_frames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VideoDataProto::video_frames() const {
  // @@protoc_insertion_point(field_list:VideoDataProto.video_frames)
  return video_frames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VideoDataProto::mutable_video_frames() {
  // @@protoc_insertion_point(field_mutable_list:VideoDataProto.video_frames)
  return &video_frames_;
}

// bytes single_frame = 2;
inline void VideoDataProto::clear_single_frame() {
  single_frame_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VideoDataProto::single_frame() const {
  // @@protoc_insertion_point(field_get:VideoDataProto.single_frame)
  return _internal_single_frame();
}
inline void VideoDataProto::set_single_frame(const std::string& value) {
  _internal_set_single_frame(value);
  // @@protoc_insertion_point(field_set:VideoDataProto.single_frame)
}
inline std::string* VideoDataProto::mutable_single_frame() {
  // @@protoc_insertion_point(field_mutable:VideoDataProto.single_frame)
  return _internal_mutable_single_frame();
}
inline const std::string& VideoDataProto::_internal_single_frame() const {
  return single_frame_.Get();
}
inline void VideoDataProto::_internal_set_single_frame(const std::string& value) {
  
  single_frame_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VideoDataProto::set_single_frame(std::string&& value) {
  
  single_frame_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:VideoDataProto.single_frame)
}
inline void VideoDataProto::set_single_frame(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  single_frame_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:VideoDataProto.single_frame)
}
inline void VideoDataProto::set_single_frame(const void* value,
    size_t size) {
  
  single_frame_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:VideoDataProto.single_frame)
}
inline std::string* VideoDataProto::_internal_mutable_single_frame() {
  
  return single_frame_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VideoDataProto::release_single_frame() {
  // @@protoc_insertion_point(field_release:VideoDataProto.single_frame)
  return single_frame_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VideoDataProto::set_allocated_single_frame(std::string* single_frame) {
  if (single_frame != nullptr) {
    
  } else {
    
  }
  single_frame_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), single_frame,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:VideoDataProto.single_frame)
}
inline std::string* VideoDataProto::unsafe_arena_release_single_frame() {
  // @@protoc_insertion_point(field_unsafe_arena_release:VideoDataProto.single_frame)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return single_frame_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VideoDataProto::unsafe_arena_set_allocated_single_frame(
    std::string* single_frame) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (single_frame != nullptr) {
    
  } else {
    
  }
  single_frame_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      single_frame, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:VideoDataProto.single_frame)
}

// int32 width = 3;
inline void VideoDataProto::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoDataProto::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoDataProto::width() const {
  // @@protoc_insertion_point(field_get:VideoDataProto.width)
  return _internal_width();
}
inline void VideoDataProto::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void VideoDataProto::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:VideoDataProto.width)
}

// int32 height = 4;
inline void VideoDataProto::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoDataProto::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoDataProto::height() const {
  // @@protoc_insertion_point(field_get:VideoDataProto.height)
  return _internal_height();
}
inline void VideoDataProto::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void VideoDataProto::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:VideoDataProto.height)
}

// double fps_rate = 5;
inline void VideoDataProto::clear_fps_rate() {
  fps_rate_ = 0;
}
inline double VideoDataProto::_internal_fps_rate() const {
  return fps_rate_;
}
inline double VideoDataProto::fps_rate() const {
  // @@protoc_insertion_point(field_get:VideoDataProto.fps_rate)
  return _internal_fps_rate();
}
inline void VideoDataProto::_internal_set_fps_rate(double value) {
  
  fps_rate_ = value;
}
inline void VideoDataProto::set_fps_rate(double value) {
  _internal_set_fps_rate(value);
  // @@protoc_insertion_point(field_set:VideoDataProto.fps_rate)
}

// bool frame_size_captured = 6;
inline void VideoDataProto::clear_frame_size_captured() {
  frame_size_captured_ = false;
}
inline bool VideoDataProto::_internal_frame_size_captured() const {
  return frame_size_captured_;
}
inline bool VideoDataProto::frame_size_captured() const {
  // @@protoc_insertion_point(field_get:VideoDataProto.frame_size_captured)
  return _internal_frame_size_captured();
}
inline void VideoDataProto::_internal_set_frame_size_captured(bool value) {
  
  frame_size_captured_ = value;
}
inline void VideoDataProto::set_frame_size_captured(bool value) {
  _internal_set_frame_size_captured(value);
  // @@protoc_insertion_point(field_set:VideoDataProto.frame_size_captured)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_VideoData_2eproto
